version: '3'

vars:
  KUBECONFIG: ./k3s_kubeconfig.yaml
  SSH_KEY_PATH: ~/.ssh/hetzner_kube_key

tasks:
  default:
    desc: "Show available tasks"
    cmds:
      - task --list

  init:
    desc: "Initialize project with dependency checks and setup wizard"
    cmds:
      - echo "üöÄ Initializing kube-hetzner project..."
      - task: check-deps
      - task: setup-keys
      - task: setup-config
      - echo "‚úÖ Initialization complete! Run 'task deploy' to create your cluster."

  check-deps:
    desc: "Verify all required tools are installed"
    cmds:
      - python3 scripts/check_deps.py

  setup-keys:
    desc: "Generate SSH keys if they don't exist"
    status:
      - test -f {{.SSH_KEY_PATH}}
    cmds:
      - echo "üîë Generating SSH key pair..."
      - ssh-keygen -t rsa -b 4096 -f {{.SSH_KEY_PATH}} -N ""
      - echo "‚úÖ SSH keys generated at {{.SSH_KEY_PATH}}"

  setup-config:
    desc: "Interactive configuration wizard"
    cmds:
      - python3 scripts/setup_config.py

  deploy:
    desc: "Deploy complete Kubernetes cluster with External Secrets"
    deps: [check-config, check-terraform-config]
    cmds:
      - echo "üöÄ Starting cluster deployment..."
      - task: deploy-infrastructure
      - task: deploy-external-secrets
      - task: deploy-secretstores
      - task: deploy-letsencrypt
      - echo "üéâ Deployment complete! Run 'task doctor' to verify everything is working."

  deploy-infrastructure:
    desc: "Deploy cluster infrastructure (Step 1)"
    deps: [check-config, check-terraform-config]
    cmds:
      - task: terraform-apply
      - task: wait-for-cluster
      - echo "‚úÖ Infrastructure deployment complete"

  deploy-external-secrets:
    desc: "Deploy External Secrets Operator (Step 2)"
    deps: [deploy-infrastructure]
    cmds:
      - task: wait-for-eso
      - echo "‚úÖ External Secrets Operator deployment complete"

  deploy-secretstores:
    desc: "Deploy SecretStores configuration (Step 3)"
    deps: [deploy-external-secrets]
    cmds:
      - task: apply-secretstores
      - echo "‚úÖ SecretStores deployment complete"

  deploy-letsencrypt:
    desc: "Deploy Let's Encrypt configuration (Step 4)"
    deps: [deploy-infrastructure]
    cmds:
      - task: apply-letsencrypt
      - echo "‚úÖ Let's Encrypt deployment complete"

  check-config:
    desc: "Verify configuration files exist"
    preconditions:
      - test -f terraform.tfvars
      - test -f {{.SSH_KEY_PATH}}
    cmds:
      - echo "‚úÖ Configuration files verified"

  terraform-apply:
    desc: "Apply Terraform configuration"
    cmds:
      - echo "üèóÔ∏è  Deploying infrastructure with Terraform..."
      - terraform init
      - terraform apply -auto-approve
      - echo "‚úÖ Cluster infrastructure deployed"
      - echo "üîê Deploying External Secrets Operator..."
      - cd step2 && bash cleanup.sh
      - cd step2 && terraform init
      - cd step2 && terraform apply -auto-approve
      - echo "‚úÖ External Secrets Operator deployed"

  wait-for-cluster:
    desc: "Wait for cluster to be ready"
    cmds:
      - python3 scripts/wait_for_cluster.py

  wait-for-eso:
    desc: "Wait for External Secrets Operator to be ready"
    cmds:
      - echo "‚è≥ Waiting for External Secrets Operator..."
      - kubectl --kubeconfig={{.KUBECONFIG}} wait --for=condition=ready pod -l app.kubernetes.io/name=external-secrets -n external-secrets --timeout=300s
      - kubectl --kubeconfig={{.KUBECONFIG}} wait --for=condition=ready pod -l app.kubernetes.io/name=bitwarden-sdk-server -n external-secrets --timeout=300s
      - kubectl --kubeconfig={{.KUBECONFIG}} wait --for=condition=ready pod -l app.kubernetes.io/name=external-secrets-webhook -n external-secrets --timeout=300s
      - echo "‚è≥ Waiting for webhook to be fully ready..."
      - sleep 10
      - echo "‚úÖ External Secrets Operator is ready"

  apply-secretstores:
    desc: "Apply Bitwarden SecretStore configuration"
    deps: [wait-for-eso]
    cmds:
      - echo "üîê Creating namespaces..."
      - kubectl --kubeconfig={{.KUBECONFIG}} create namespace staging --dry-run=client -o yaml | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -
      - kubectl --kubeconfig={{.KUBECONFIG}} create namespace production --dry-run=client -o yaml | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -
      - echo "üîê Copying Bitwarden credentials to namespaces..."
      - kubectl --kubeconfig={{.KUBECONFIG}} delete secret bitwarden-credentials -n staging --ignore-not-found=true
      - kubectl --kubeconfig={{.KUBECONFIG}} delete secret bitwarden-credentials -n production --ignore-not-found=true
      - "kubectl --kubeconfig={{.KUBECONFIG}} get secret bitwarden-credentials -n external-secrets -o yaml | sed 's/namespace: external-secrets/namespace: staging/' | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -"
      - "kubectl --kubeconfig={{.KUBECONFIG}} get secret bitwarden-credentials -n external-secrets -o yaml | sed 's/namespace: external-secrets/namespace: production/' | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -"
      - echo "üîê Copying CA bundle to namespaces..."
      - kubectl --kubeconfig={{.KUBECONFIG}} delete secret bitwarden-ca-bundle -n staging --ignore-not-found=true
      - kubectl --kubeconfig={{.KUBECONFIG}} delete secret bitwarden-ca-bundle -n production --ignore-not-found=true
      - "kubectl --kubeconfig={{.KUBECONFIG}} get secret bitwarden-ca-bundle -n cert-manager -o jsonpath='{.data.ca\\.crt}' | base64 -d | kubectl --kubeconfig={{.KUBECONFIG}} create secret generic bitwarden-ca-bundle -n staging --from-file=ca.crt=/dev/stdin --dry-run=client -o yaml | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -"
      - "kubectl --kubeconfig={{.KUBECONFIG}} get secret bitwarden-ca-bundle -n cert-manager -o jsonpath='{.data.ca\\.crt}' | base64 -d | kubectl --kubeconfig={{.KUBECONFIG}} create secret generic bitwarden-ca-bundle -n production --from-file=ca.crt=/dev/stdin --dry-run=client -o yaml | kubectl --kubeconfig={{.KUBECONFIG}} apply -f -"
      - echo "üîê Applying SecretStore configuration..."
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f examples/bitwarden-secretstore.yaml
      - python3 scripts/wait_for_secretstores.py

  apply-letsencrypt:
    desc: "Apply Let's Encrypt ClusterIssuer"
    deps: [wait-for-cluster]
    cmds:
      - echo "üîí Applying Let's Encrypt ClusterIssuer..."
      - kubectl --kubeconfig={{.KUBECONFIG}} apply -f examples/letsencrypt-issuer.yaml
      - echo "‚úÖ Let's Encrypt ClusterIssuer applied"

  doctor:
    desc: "Check cluster health and configuration"
    cmds:
      - python3 scripts/check_cluster_health.py

  destroy:
    desc: "Destroy the cluster and all resources"
    deps: [check-terraform-config]
    prompt: "This will destroy your entire cluster. Are you sure?"
    cmds:
      - echo "üßπ Destroying cluster..."
      - terraform destroy -auto-approve
      - echo "‚úÖ Cluster destroyed"

  # Internal tasks (dependencies, not for direct use)
  check-terraform-config:
    desc: "Check Terraform configuration and credentials"
    cmds:
      - python3 scripts/check_terraform_config.py

  # Advanced tasks (use sparingly)  
  logs:
    desc: "Show External Secrets logs for debugging"
    cmds:
      - kubectl --kubeconfig={{.KUBECONFIG}} logs -n external-secrets -l app.kubernetes.io/name=external-secrets --tail=20

  reset:
    desc: "Reset configuration and start over"
    prompt: "This will remove all configuration. Continue?"
    cmds:
      - rm -f terraform.tfvars .terraform terraform.tfstate* {{.KUBECONFIG}}
      - rm -rf .terraform
      - echo "‚úÖ Reset complete. Run 'task init' to start over."
